name: Client Workflow

on:
  workflow_dispatch:
    inputs:
      app_id:
        description: "Application ID"
        required: true
        default: "unknown"
      test_data:
        description: "Test data"
        required: true
        default: "0"
      email:
        description: "Customer Email"
        required: true
      timer_duration:
        description: "Timer Duration in seconds"
        required: false
        default: "300"

jobs:
  trackTime:
    runs-on: ubuntu-latest
    outputs:
      start-time: ${{ steps.get-start-time.outputs.start-time }}
    steps:
      - name: Get Start Time
        id: get-start-time
        run: echo "::set-output name=start-time::$(date +%s)"

  check-disk-space:
    needs: [trackTime]
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: main 

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.x

      - name: Cache Python dependencies
        id: cache_python
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
        if: steps.cache_python.outputs.cache-hit != 'true'

      - name: Check before build
        run: python check.py

      - name: Handle disk check
        if: failure()
        run: echo "Disk is full and cannot build"

  build:
    needs: [check-disk-space]
    runs-on: ubuntu-latest

    env:
      TIMER_DURATION: ${{ github.event.inputs.timer_duration }}
      APP_ID: ${{ github.event.inputs.app_id }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.x

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: main
          repository: ezactivevn/ezleague-core
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Git
        run: |
          git config --global user.name "Phu Hoang"
          git config --global user.email ${{ github.event.inputs.email }}

      - name: Authenticate with GitHub
        env:
          TOKEN: ${{ secrets.PAT_TOKEN }}
        run: echo "machine github.com login ${{ github.actor }} password $TOKEN" > ~/.netrc

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Cache Python dependencies
        id: cache_python
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
        if: steps.cache_python.outputs.cache-hit != 'true'

      - name: Cache Node.js modules
        id: cache_node_modules
        uses: actions/cache@v3
        with:
          path: client/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
        if: steps.cache_node_modules.outputs.cache-hit != 'true'

      - name: Cache Firebase tools
        id: cache_firebase
        uses: actions/cache@v3
        with:
          path: ~/.cache/firebase
          key: ${{ runner.os }}-firebase-tools-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-firebase-tools-
        if: steps.cache_firebase.outputs.cache-hit != 'true'

      - name: Install Firebase tools
        if: steps.cache_firebase.outputs.cache-hit != 'true'
        run: npm install -g firebase-tools

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python script
        run: python runscript.py ${{ github.event.inputs.app_id }} ${{ secrets.PAT_TOKEN }} ${{ secrets.FIREBASE_TOKEN }} ${{ github.actor }} ${{ github.event.inputs.email }}
        env: 
          TEST_DATA: ${{ github.event.inputs.test_data }}

      - name: Generate image resources
        run: |
          cd client
          npx @capacitor/assets generate --iconBackgroundColor '#eeeeee' --iconBackgroundColorDark '#222222' --splashBackgroundColor '#eeeeee' --splashBackgroundColorDark '#111111'
          npx @capacitor/assets generate

      - name: Push to GitHub
        run: |
          git checkout -b ezleague/${{ github.event.inputs.app_id }}
          git add -A
          git commit -m "ezleague/${{ github.event.inputs.app_id }}"
          git push -u origin ezleague/${{ github.event.inputs.app_id }} --force

  notify:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.x

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pusher

      - name: Notify via Slack (Success)
        if: success()
        run: python slack.py ${{ github.event.inputs.app_id }} 1 client

      - name: Notify via Email and Slack (Failure)
        if: failure()
        run: |
          python sendmail.py ${{ github.event.inputs.app_id }} 3
          python slack.py ${{ github.event.inputs.app_id }} 0 client
