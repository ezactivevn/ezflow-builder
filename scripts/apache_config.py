import subprocess

class ApacheConfigurator:
    def __init__(self):
        pass

    def run_command(self, command: str):
        """Ch·∫°y l·ªánh h·ªá th·ªëng v√† in k·∫øt qu·∫£."""
        print(f"‚ñ∂Ô∏è Running: {command}")
        try:
            result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            print(result.stdout.decode())
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Command failed: {e.stderr.decode()}")

    def update_apache_config(self, config_path: str, alias_path: str, alias_target: str, marker: str):
        """Th√™m Alias v√†o Apache config n·∫øu ch∆∞a t·ªìn t·∫°i."""
        try:
            with open(config_path, 'r') as file:
                lines = file.readlines()

            # Ki·ªÉm tra n·∫øu alias ƒë√£ t·ªìn t·∫°i
            if any(f"Alias {alias_path}" in line for line in lines):
                print("‚úÖ Alias ƒë√£ t·ªìn t·∫°i.")
                return

            # T·∫°o kh·ªëi Alias
            alias_block = (
                f"\nAlias {alias_path} {alias_target}\n"
                f"<Directory {alias_target}>\n"
                f"    Options Indexes FollowSymLinks\n"
                f"    AllowOverride All\n"
                f"    Require all granted\n"
                f"</Directory>\n"
            )

            # Ch√®n alias_block tr∆∞·ªõc d√≤ng c√≥ marker
            inserted = False
            for i, line in enumerate(lines):
                if marker in line:
                    lines.insert(i, alias_block)
                    inserted = True
                    break

            if not inserted:
                print("‚ö†Ô∏è Marker not found in config. Appending block at end.")
                lines.append(alias_block)

            # C·∫•p quy·ªÅn ghi t·∫°m th·ªùi r·ªìi ghi file
            self.run_command(f"sudo chmod +w {config_path}")
            with open(config_path, 'w') as file:
                file.writelines(lines)
            self.run_command(f"sudo chmod -w {config_path}")
            print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t Apache config.")

        except Exception as e:
            print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t Apache config: {e}")

    def restart_services(self):
        """Restart Apache v√† Supervisor services."""
        print("üîÑ Restarting Apache v√† Supervisor...")
        self.run_command("sudo systemctl restart apache2")
        self.run_command("sudo supervisorctl reread")
        self.run_command("sudo supervisorctl update")
        self.run_command("sudo supervisorctl start laravel-worker:*")

    def add_supervisor_config(self, app_name: str):
        """Th√™m Supervisor config cho ·ª©ng d·ª•ng Laravel."""
        source = f"/var/www/html/server/{app_name}/supervisor/laravel-worker.conf"
        dest = f"/etc/supervisor/conf.d/{app_name}.conf"
        self.run_command(f"sudo cp {source} {dest}")
        print(f"‚úÖ ƒê√£ th√™m Supervisor config cho {app_name}")
