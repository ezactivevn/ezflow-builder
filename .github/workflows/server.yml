name: Server Workflow

on:
  workflow_dispatch:
    inputs:
      app_id:
        description: 'Application ID'
        required: true
        default: 'unknown'
      repo_url:
        description: 'Repository URL'
        required: true
        default: 'unknown'

env:
  GCLOUD_PASSWORD: ${{ secrets.GCLOUD_PASSWORD }}
  APP_ID: ${{ github.event.inputs.app_id }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          pip install mysql-connector-python

      - name: Set up Git
        run: |
          git config --global user.name ${{ vars.USERNAME }}
          git config --global user.email ${{ vars.EMAIL }}

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: main
          repository: ${{ github.event.inputs.repo_url }}
          token: ${{ secrets.PAT_TOKEN }}

      - name: Authenticate with GitHub
        run: echo "machine github.com login ${{vars.USERNAME}} password $TOKEN" > ~/.netrc

      - name: Add PAT_TOKEN
        run: export PAT_TOKEN=$PAT_TOKEN

      - name: Log Tokens
        run: |
          echo "PAT_TOKEN: $PAT_TOKEN"
          echo "FIREBASE_TOKEN: $FIREBASE_TOKEN"
          echo "GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS"

      - name: List files
        run: ls -a

      - name: Remove old folder
        run: sudo -S rm -rf /var/www/html/${{ env.APP_ID }}

      - name: Copy folder to /var/www/html/
        run: sudo -S cp -r server /var/www/html/${{ env.APP_ID }}

      - name: List files in /var/www/html/
        run: ls -a /var/www/html/${{ env.APP_ID }}

      - name: Copy env.txt to .env
        run: sudo -S cp /var/www/html/${{ env.APP_ID }}/env.txt /var/www/html/${{ env.APP_ID }}/.env

      - name: Run create_db.py
        run: |
          cd /var/www/html/${{ env.APP_ID }}
          python createDB.py ${{ env.APP_ID }} ${{ env.GCLOUD_PASSWORD }}
        env:
          DB_HOST: ${{ env.DB_HOST }}
          DB_NAME: ${{ env.DB_NAME }}
          DB_USER: ${{ env.DB_USER }}
          DB_PASSWORD: ${{ env.DB_PASSWORD }}

      - name: Run Composer install
        run: sudo -S composer install -d /var/www/html/${{ env.APP_ID }}

      - name: Change owner of /var/www/html/public
        run: sudo -S chown -R www-data:www-data /var/www/html/${{ env.APP_ID }}/public

      - name: Change owner of /var/www/html/storage
        run: sudo -S chown -R www-data:www-data /var/www/html/${{ env.APP_ID }}/storage

      - name: Run storage:link
        run: sudo -S php /var/www/html/${{ env.APP_ID }}/artisan storage:link

      - name: Run generate key
        run: sudo -S php /var/www/html/${{ env.APP_ID }}/artisan key:generate

      - name: Run migrate
        run: yes | sudo -S php /var/www/html/${{ env.APP_ID }}/artisan migrate

      - name: Run passport install
        run: yes | sudo -S php /var/www/html/${{ env.APP_ID }}/artisan passport:install

      - name: List files in /var/www/html/
        run: ls -a /var/www/html/${{ env.APP_ID }}

      - name: Run updateDB.py
        run: |
          cd /var/www/html/${{ env.APP_ID }}
          python updateDB.py ${{ env.APP_ID }} ${{ env.GCLOUD_PASSWORD }}

  failer:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          pip install mysql-connector-python

      - name: Send mail failer
        run: python sendmail.py ${{ env.APP_ID }} fail
